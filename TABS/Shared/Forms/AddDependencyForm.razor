@inject CrudService CrudService
@inject ApplicationService AppService
@inject IStringLocalizer<App> Localizer

@if (!_isLoaded)
{
    <div class="spinner-container">
        <Spin Tip=@Localizer["Loading"] />
    </div>
}
else if (allRows.Count == 0)
{
    <Result Title=@Localizer["DependencyForm.NoApplicationsTitle"] >
        <SubTitleTemplate>
            @Localizer["DependencyForm.NoApplicationsSubtitle"] <NavLink href="applications/add">@Localizer["DependencyForm.LinkToAddNewApp"]</NavLink>
        </SubTitleTemplate>
    </Result>
}
else
{
    <div>
        <div class="searchbar-container">
            <Search Placeholder="@Localizer["SearchApplicationName"]"
                    WrapperStyle="width: 260px;"
                    ClassicSearchIcon
                    DebounceMilliseconds="500"
                    @bind-Value="@search"
                    OnChange="FilterRows" />
        </div>
        <Table @ref="table"
               DataSource="displayedRows"
               Size="TableSize.Small"
               RowClassName="@(x => x.Data.isSelected ? "selected" : "")"
               ScrollY="300px"
               ScrollX="150%"
               PageSize="100" 
               HidePagination
               Loading="!_isLoaded">
            <Column @bind-Field="@context.isSelected" Width="50px" Title=" " Fixed="left">
                <Checkbox @bind-Checked="@context.isSelected" OnChange="() => toggleSelect(context.value.ApplicationID)" />
            </Column>
            <Column @bind-Field="@context.value" Title="@Localizer[AppIdModuleProperties["APMID"].LocalizationKey]" Width="100px" Fixed="left">
                @context.value.Identification?.APMID
            </Column>
            <Column @bind-Field="@context.value" Title="@Localizer[AppIdModuleProperties["Name"].LocalizationKey]" Width="200px" Fixed="left">
                    @context.value.Identification?.Name
                @(context.value.IsDeleted ? $" ({Localizer["Deleted"]})" : 
                  context.value.IsArchived ? $" ({Localizer["Archived"]})" : "")
            </Column>
            <Column @bind-Field="@context.value" Title="@Localizer[AppIdModuleProperties["WebURL"].LocalizationKey]">
                @foreach (var url in context.value.Identification?.WebURL.Trim().Split("\n"))
                {
                    <a href="@url" target="_blank" rel="noopener noreferrer">
                        @url
                    </a> <br/>
                }
            </Column>
        </Table>
        <Text Type="secondary" Style="margin-top: 1em;">@(Localizer["ItemSelected", allRows.Where(x => x.isSelected).Count()])</Text>
        <div class="button-group">
            <Button Type="@ButtonType.Primary" 
                    OnClick="OnClickSubmit" 
                    Loading="@_awaitingSave" 
                    Disabled="@(allRows.Where(x => x.isSelected).Count() < 1)">
                @Localizer["Save"]
            </Button>
            <Button OnClick="OnCancel">@Localizer["Cancel"]</Button>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<List<Application>> OnSubmitSuccess { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public List<int> ApplicationsToExcludeIds { get; set; } = new List<int>() { };

    private ITable table;
    private string search;

    private List<SelectionItem<Application>> allRows = new List<SelectionItem<Application>>();
    private List<SelectionItem<Application>> displayedRows = new List<SelectionItem<Application>>();

    private bool _isLoaded = false;
    private bool _awaitingSave = false;

    private Dictionary<string, ModuleProperty> AppIdModuleProperties;

    protected async override void OnInitialized()
    {
        AppIdModuleProperties = new ApplicationIdentification().GetProperties();

        var apps = await FetchApps();

        allRows = apps.Select(app => new SelectionItem<Application>(app)).ToList();
        displayedRows = allRows.Select(s => new SelectionItem<Application>(s.value)).ToList();

        _isLoaded = true;
        StateHasChanged();
    }

    private async Task<IEnumerable<Application>> FetchApps()
    {
        List<Application> _apps = await CrudService.GetDataAsync<Application>();
        List<Task<Application>> populateTasks = new List<Task<Application>>();

        foreach (var app in _apps)
        {
            if (!ApplicationsToExcludeIds.Contains(app.ApplicationID) && app.IsComplete && !app.IsDeleted)
            {
                Task<Application> populateTask = AppService.GetApplicationByID(app.ApplicationID);
                populateTasks.Add(populateTask);
            }
        }
        return await Task.WhenAll(populateTasks);
    }

    public void FilterRows()
    {
        if (search == null || search == "")
        {
            displayedRows = allRows.Select(s => new SelectionItem<Application>(s.value, s.isSelected)).ToList();
        }
        else
        {
            displayedRows = allRows.Where(x => x.value.Identification.Name.ToLower().Contains(search.ToLower().Trim())).Select(s => new SelectionItem<Application>(s.value, s.isSelected)).ToList();
        }
    }

    private void toggleSelect(int id)
    {
        allRows.First(row => row.value.ApplicationID == id).isSelected = !allRows.First(row => row.value.ApplicationID == id).isSelected;
    }

    private async Task OnClickSubmit()
    {
        _awaitingSave = true;
        StateHasChanged();

        List<Application> selectedApplications = allRows.Where(x => x.isSelected).Select(s => s.value).ToList();
        await OnSubmitSuccess.InvokeAsync(selectedApplications);

        _awaitingSave = false;
        StateHasChanged();
    }

}
