@page "/applications/add"

@using System.Reflection; 
@using System.ComponentModel.DataAnnotations;
@using TABS.Data;
@using System.ComponentModel;
@using TABS.Shared;
@using Newtonsoft.Json;
@using shortid;
@using shortid.Configuration;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using AntDesign;


@inject AuthService AuthService
@inject UserService UserService
@inject CrudService CrudService
@inject ApplicationService AppService
@inject MessageService message
@inject NavigationManager navigationManager
@inject Global Global
@inject AntDesign.ModalService _modalService

<div class="ant-card ant-card-body">
    <Spin Spinning="@IsLoading">
        @if (currUser != null)
        { 
            if (currUser.Role.PermissionLevel == (int)RoleEnums.Roles.Admin || currUser.Role.PermissionLevel == (int)RoleEnums.Roles.PowerUser)
            {
            <PageHeader>
                <PageHeaderBreadcrumb>
                    <Breadcrumb>
                        <BreadcrumbItem>
                            <Icon Type="project" />
                            <NavLink href="applications">@Localizer["Applications"]</NavLink>
                        </BreadcrumbItem>
                        <BreadcrumbItem>
                            @Localizer["AddApplication.AddNewApplication"]
                        </BreadcrumbItem>
                    </Breadcrumb>
                </PageHeaderBreadcrumb>
                <PageHeaderTitle>
                    @Localizer["AddApplication.AddNewApplication"]
                </PageHeaderTitle>
                <PageHeaderExtra>
                    @if (!IsLoading)
                    {
                            <Popconfirm Title="@Localizer["AddApplication.DiscardMessage"]"
                                    OkText="@Localizer["Yes"]"
                                    CancelText="@Localizer["No"]"
                                    OnConfirm="@(async () =>
                                                 {
                                                    await DiscardApplication();
                                                 })"
                                    Placement="Placement.BottomRight">
                                <Button Size="@ButtonSize.Small" Danger>
                                @Localizer["Discard"]
                                </Button>
                            </Popconfirm>
                    }
                </PageHeaderExtra>
            </PageHeader>

            <Divider Style="margin:10px 0px 30px 0px;" />
            <!-- The step component seen at the very top of the page ("Main Project Creation Steps") -->
            <Steps Current="currentStep" Size="small" ShowProgressDot>
                @foreach (var step in steps)
                {
                   <Step Title="@Localizer[step.TitleKey]" />
                }
            </Steps>
            <div class="ant-card ant-card-body">
                <div>
                    @if (currentStep == 0)
                    {
                        <h4>@Localizer["AddApplication.NameYourApplication"]</h4>
                        <br />
                        @if (isDuplicate) {
                        <Alert Type="@AlertType.Error"
                            MessageTemplate="duplicateNameTemplate"
                            ShowIcon="true" />
                        }
                        <br />
                        <Form Model="@model"
                            ValidateMode="@FormValidateMode.Complex"
                            OnFinish="OnFinish">
                            <FormItem Label="@Localizer["Application.Identification.Name"]" Rules=@(appNameRules)>
                                <div class="project-name">
                                    <Input @bind-Value="@context.ProjectName" DebounceMilliseconds="500" DefaultValue="@String.Empty" MaxLength="200"/>
                                </div>
                            </FormItem>
                            <FormItem>
                                <Button Type="@ButtonType.Primary" Disabled="isCheckingDuplicateName || IsSaving" HtmlType="submit">
                                    @Localizer["Next"]
                                </Button>
                            </FormItem>
                        </Form>
                    }
                    @if (currentStep == 1 && editModuleProcess == false)
                    {
                        <h4>@Localizer["AddApplication.SelectModules"]</h4>
                        <br />
                        <Table TItem="Module" DataSource="@AllModules"
                                HidePagination="true" Size="@TableSize.Small">
                            <Column Title="@Localizer["ModuleName"]" @bind-Field="@context.DisplayName" />
                            <Column Title="@Localizer["Use"]" Field="@Localizer[context.Required ? "Required" : "Optional"]">
                                <Tag PresetColor="@(context.Required ? PresetColor.Red : PresetColor.Gold)">
                                @Localizer[context.Required ? "Required" : "Optional"] 
                                </Tag>
                            </Column>
                            <Column Title="@Localizer["AddApplication.IncludeModule"]" Field="@context.Added">
                                <Switch @bind-Checked="@context.Added" Disabled=@(context.Required) />
                            </Column>
                        </Table>
                    }
                    @if (currentStep == 1 && editModuleProcess == true)
                    {
                        <h4>@Localizer["AddApplication.FillInModules"]</h4>
                        <br />
                        <ModuleTable ApplicationObj="@app" typeKey="@AddedModules[currentModule].Type" @ref="@_module" ShowModuleTitle="true"/>
                    }
                    @if (currentStep == 2)
                    {
                        <h4>@Localizer["AddApplication.ReviewApplication"]</h4>
                        <br />
                        <Card>
                            <p style="overflow-wrap: anywhere;"><AntDesign.Text Strong>@Localizer["AddApplication.ApplicationName"]:</AntDesign.Text>@(" " + newProject.name)</p>
                            <br />
                            <Table
                                TItem="Module"
                                HidePagination="true"
                                DataSource="@AddedModules"
                                Size="@TableSize.Small">
                                <Column Title="@Localizer["AddApplication.SelectedModules"]" @bind-Field="@context.DisplayName" />
                                <Column Field="@Localizer[context.Required ? "Required" : "Optional"]">
                                    <Tag PresetColor="@(context.Required ? PresetColor.Red : PresetColor.Gold)">
                                        @Localizer[context.Required ? "Required" : "Optional"]
                                    </Tag>
                                </Column>
                                <Column Field="@context.Added">
                                    <Button Icon="edit" Type="@ButtonType.Default" Size="small" 
                                            OnClick="@(()=> { _visible = true; currReviewModule = context; })">
                                        @Localizer["Edit"]
                                    </Button>
                                </Column>
                            </Table>
                        </Card>
                        <Modal Title="@Localizer["AddApplication.ReviewModule"]"
                            Visible="@_visible"
                            OnOk="@HandleOk"
                            OnCancel="@HandleCancel"
                            Width=800
                            Draggable="true"
                            Style="top: 20px">
                            <ModuleTable ApplicationObj="@app" typeKey="@currReviewModule.Type" @ref="@_module" ShowModuleTitle="true"/>
                        </Modal>
                    }
                </div>

                <div class="steps-action">
                    @if (currentStep == 1 && !editModuleProcess)
                    {
                            <Button Disabled="IsSaving" OnClick="OnBackToEnterProjectName">@Localizer["GoBack"]</Button>
                            <Button Type="@ButtonType.Primary" Disabled="IsSaving" OnClick="OnFirstNextModuleClick">@Localizer["Next"]</Button>
                            //<Button Type="@ButtonType.Primary" Disabled="IsSaving" OnClick="OnConfirm" Style="margin-left: 4px;">@Localizer["Next"]</Button>

                    }

                    @if (currentStep == 2)
                    {
                            <Button Disabled="IsSaving" OnClick="OnBackToModuleSelectionModule">@Localizer["AddApplication.BackToModuleSelection"]</Button>
                            <Button Type="@ButtonType.Primary" Disabled="IsSaving" OnClick="() => submitApplication()">
                                @Localizer["Done"]
                            </Button>
                    }

                    @if (currentStep == 1 && editModuleProcess)
                    {               
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            @if (currentModule == 0)
                            {
                                        <Button Type="@ButtonType.Primary" Disabled="IsSaving" OnClick="OnNextModule">@Localizer["AddApplication.NextModule"] @(" " + AddedModules[Math.Clamp(currentModule + 1, 0, AddedModules.Count - 1)].DisplayName)</Button>
                            }

                            else if (currentModule > 0 && currentModule < AddedModules.Count - 1)
                            {
                                <div>
                                        <Button Disabled="IsSaving" OnClick="OnPreviousModule">@Localizer["GoBack"]</Button>
                                        <Button Type="@ButtonType.Primary" Disabled="IsSaving" OnClick="OnNextModule">@Localizer["AddApplication.NextModule"] @(" " + AddedModules[Math.Clamp(currentModule + 1, 0, AddedModules.Count - 1)].DisplayName)</Button>
                                </div>
                            }

                            else if (currentModule == AddedModules.Count - 1)
                            {
                                <div>
                                        <Button Disabled="IsSaving" OnClick="OnPreviousModule">@Localizer["GoBack"]</Button>
                                        <Button Type="@ButtonType.Primary" Disabled="IsSaving" OnClick="OnReviewProjectClick">@Localizer["AddApplication.ReviewApplication"]</Button>
                                </div>
                            }
    @*                    <Button Type="@ButtonType.Primary" Disabled="IsSaving" OnClick="OnReviewProjectClick">@Localizer["AddApplication.ReviewApplication"]</Button>
    *@                    
                            <Button Disabled="IsSaving" OnClick="OnBackToModuleSelectionModule">@Localizer["AddApplication.BackToModuleSelection"]</Button>

                        </div>
                    }
                </div>
                </div>
            }
            else
            {
                // the user is ReadOnly (note: this page is only accessible by directly typing in the URL)
                <Result Status="403" Title="@Localizer["Unauthorized"]"/>
            }
        }
    </Spin>
</div>

<!-- The styling to be used in the project creation process -->
<style>

    /* Content being presented in each step */
    .steps-content {
                                margin-top: 16px;
                                min-height: 200px;
                                text-align: left;
                                padding-top: 40px;
                            }

    /* The "action items" like "Next" and "Go Back" Buttons */
    .steps-action {
                                margin-top: 24px;
                            }

    /* The project name input box*/
    .project-name {
                                padding-right: 70%;
                            }
</style>

@code {

    [Inject]
    public IStringLocalizer<App> Localizer { get; set; }

    // rules used to validate the app name
    private FormValidationRule[] appNameRules;

    bool IsLoading = true;
    bool IsSaving = false;
    bool isCheckingDuplicateName = false;
    bool isDuplicate = false;
    bool isAppInProgress = false;
    bool isDefaultApp = false;
    bool userSelectedInProgressOption = false; // used to block other buttons on the in progress modal

    RenderFragment duplicateNameTemplate { get; set; }

    private ApplicationProperties applicationProperties = new()
    {
        availableModules = new List<int>(),
        featuredModules = new List<int>()
    };

    private User currUser;

    // ** Declaring A New Project Object //
    Project newProject;

    private Application app;

    // Creating the module component

    private ModuleTable _module;

    // **"Main Project Creation Steps" Code** //

    //The step class itself//
    public class StepItem
    {
        public string TitleKey { get; set; }

    }

    // The steps involved in our project creation process //
    public StepItem[] steps = new StepItem[] {
            new StepItem { TitleKey = "AddApplication.NameYourApplicationShort" },
            new StepItem { TitleKey = "AddApplication.SelectAndFillInModules" },
            new StepItem { TitleKey = "AddApplication.ReviewApplication" }
        };

    //Keeps track of which step we are currently on//
    public int currentStep { get; set; } = 0;

    // ** Project Name Form Code ** //

    public class Model
    {
        [MaxLength(200)]
        public string ProjectName { get; set; } = "";

        public string getProjectName()
        {
            return ProjectName ?? "";
        }
    }
    Model model = new Model();

    // ** An array holding all avaliable modules //
    List<Module> AllModules;

    // ** A list containing all the modules that are selected //
    List<Module> AddedModules;

    // ** Getting the modules statically (Will be removed once CRUD service is setup for this) //

    IEnumerable<Module> selectedRows;

    // ** Module Editing Process //

    // Keeps track of which module we are current at //
    public int currentModule { get; set; } = 0;

    // Lets the entire process know we are currently in the editing process
    public bool editModuleProcess { get; set; } = false;

    // edit button handling
    bool _visible = false;
    Module currReviewModule = null;

    private RenderFragment AddContent(string content) => builder =>
    {
        builder.AddMarkupContent(1, content);
    };

    // ** Instatiating The New Project Object //
    protected override async Task OnInitializedAsync()
    {
        appNameRules = new FormValidationRule[] {
            new FormValidationRule{ Validator = (validationContext) => {
                    // check for duplicate app name
                    isCheckingDuplicateName = true;
                    StateHasChanged();
                    isDuplicate = AppService.IsDuplicateName(model.getProjectName(), ignoreId: isAppInProgress ? app.ApplicationID : -1);
                    isCheckingDuplicateName = false;
                    StateHasChanged();
                    if (isDuplicate)
                    {
                        string link = $"<a href=\"{Global.GetAppDetailsURL(AppService.GetApplicationShortIDByName(model.getProjectName()))}\">{model.getProjectName()}</a>"; 
                        duplicateNameTemplate = AddContent(Localizer["DuplicateAppName", model.getProjectName(), link]);
                    }
                    return isDuplicate ? new ValidationResult("") : null;
                }
            },
            new FormValidationRule{ Required = true, Message = Localizer["ApplicationNameRequired"] }
        };


        string AdID = await AuthService.GetUserSID();
        currUser = await UserService.GetUserByAdID(AdID);

        model.ProjectName = "";
        newProject = new Project();
        newProject.name = "";
        newProject.numOfAddedModules = 0;

        if (currUser != null)
        {
            // Check if this user has an app that is not completed yet
            Application inProgressApp = await UserService.GetPendingApplication(currUser.UserID);
            if (inProgressApp != null)
            {
                app = await AppService.GetApplicationByID(inProgressApp.ApplicationID);

                RenderFragment infoIcon = @<Icon Type="info-circle" Theme="fill" Style="color:dodgerblue;"></Icon>;
                _modalService.Confirm(new ConfirmOptions
                {
                    Title = Localizer["AddApplication.RestoreSessionTitle"].ToString(),
                    Content = string.Format(Localizer["AddApplication.RestoreSessionContent"].ToString(), inProgressApp.Identification.Name),
                    OkText = Localizer["Yes"].ToString(),
                    CancelText = Localizer["DeleteApplication"].ToString(),
                    Icon = infoIcon,
                    Centered = true,
                    OnOk = async (e) =>
                    {
                        if (userSelectedInProgressOption)
                            return;

                        userSelectedInProgressOption = true;
                        isAppInProgress = true;

                        model.ProjectName = app.Identification.Name;
                        AllModules = GetModules();
                        IsLoading = false;
                        StateHasChanged();

                        await Task.CompletedTask;
                    },
                    OnCancel = async (e) =>
                    {
                        if (userSelectedInProgressOption)
                            return;

                        userSelectedInProgressOption = true;
                        await AppService.DeleteAsync(app, true);
                        CreateDefaultApp();
                        IsLoading = false;
                        StateHasChanged();
                    }
                });
            }
            else
            {
                CreateDefaultApp();
            }
        }

        IsLoading = false;
        StateHasChanged();
    }

    private async Task DiscardApplication()
    {
        IsSaving = true;
        IsLoading = true;
        StateHasChanged();
        if (!isDefaultApp)
        {
            await AppService.DeleteAsync(app, true);
        }
        IsLoading = false;
        StateHasChanged();
        navigationManager.NavigateTo(Global.GetApplicationsTableURL());
    }

    private void CreateDefaultApp()
    {
        isDefaultApp = true;
        app = new Application();
        app.Properties = JsonConvert.SerializeObject(applicationProperties);
        app.CreateByUserID = currUser != null ? currUser.UserID : -1;
        model.ProjectName = app.Identification.Name;
        newProject.numOfAddedModules = 0;
        AllModules = GetModules();
    }

    private void UpdateLastModifiedBy()
    {
        foreach(KeyValuePair<ModuleTypeEnum, TABS.Data.Module> pair in app.GetModules())
        {
            if (pair.Value != null)
            {
                pair.Value.LastModifiedBy = currUser.AdID;
                pair.Value.LastUpdate = DateTime.Now;
            }
        }
    }

    private async Task OnFinish(EditContext editContext)
    {
        IsSaving = true;
        StateHasChanged();

        app.Identification.Name = model.getProjectName();

        UpdateLastModifiedBy();

        if (!isAppInProgress)
        {
            Application foundApp = await CrudService.GetRecordAsync<Application>(app.ApplicationID);
            if (foundApp == null)
                await CrudService.InsertAsync<Application>(app); // Soft save the app

            isAppInProgress = true;
            isDefaultApp = false;
        }

        newProject.name = model.ProjectName;

        OnNextClick();

        IsSaving = false;
        StateHasChanged();
    }

    private string SerializeIgnoringReferences(Application application)
    {
        var options = new JsonSerializerOptions
        {
            ReferenceHandler = ReferenceHandler.Preserve,
            WriteIndented = true,
        };

        return System.Text.Json.JsonSerializer.Serialize(application, options);
    }

    private async Task Error(string errorMessage)
    {
        await message.Error(errorMessage);
    }

    // ** End of "Main Project Creation Steps" **//

    // ** What to do on when "Next" Button is clicked**//
    void OnNextClick()
    {
        //Move to the next step//
        currentStep++;
    }

    // ** Go back to module selection page**//
    async void OnBackToModuleSelectionModule()
    {
        bool saved = await saveModuleChanges();
        if(saved)
        {
            currentStep = 1;
            currentModule = 0;
            editModuleProcess = false;
        }
        StateHasChanged();
    }

    // ** Go back to project name page**//
    void OnBackToEnterProjectName()
    {
        // Move to the enter a project name step//
        currentStep = 0;
        newProject.name = "";
    }

    //Update the list of added modules to correctly represent all the modules that were selected//
    async Task addAllSelectedModules()
    {
        AddedModules = new List<Module>();
        applicationProperties.availableModules = new List<int>();
        newProject.numOfAddedModules = 0;
        for (int i = 0; i < AllModules.Count; i++)
        {
            if (AllModules[i].Added)
            {
                AddedModules.Add(AllModules[i]);
                newProject.numOfAddedModules++;
                applicationProperties.availableModules.Add(i + 1);
                // add modules (if optional) to the application
                addEmptyModuleToApp(AllModules[i].Type);
            }
            else
            {
                if (app.GetModules()[AllModules[i].Type] != null)
                {
                    // Remove it from the db
                    PropertyInfo propertyInfo = app.GetType().GetProperty(app.GetModules()[AllModules[i].Type].GetType().Name);
                    if (propertyInfo != null)
                    {
                        await CrudService.DeleteAsync(app.GetModules()[AllModules[i].Type]);
                        propertyInfo.SetValue(app, null, null);
                    }
                }
            }
        }
        UpdateLastModifiedBy();
        app.Properties = JsonConvert.SerializeObject(applicationProperties);
        await CrudService.UpdateAsync(app);
    }

    public List<Module> GetModules()
    {
        List<Module> moduleList = new List<Module>();

        foreach (ModuleTypeEnum moduleType in ModuleTypeEnumExtensions.GetDisplayedModules())
        {
            bool added = ModuleTypeEnumExtensions.IsModuleRequired(moduleType);
            if (isAppInProgress)
            {
                added = ModuleTypeEnumExtensions.IsModuleRequired(moduleType) || app.GetApplicationProperties().availableModules.Contains((int)moduleType);
            }

            Module module = new Module
            {
                Type = moduleType,
                Added = added,
                Required = ModuleTypeEnumExtensions.IsModuleRequired(moduleType),
                DisplayName = Localizer[moduleType.ToString()]
            };

            moduleList.Add(module);
        }

        return moduleList;
    }

    // *** First Next Module Click setup //
    async void OnFirstNextModuleClick()
    {
        await addAllSelectedModules();
        // await saveModuleChanges(); // save the app properties
        editModuleProcess = true;

        StateHasChanged();
    }

    // ** Next Click while within module editing process//
    async void OnNextModule()
    {
        bool saved = await saveModuleChanges();
        if (saved) currentModule++;

        StateHasChanged();
    }


    // ** Previous Click while within module editing process//
    async void OnPreviousModule()
    {
        bool saved = await saveModuleChanges();
        if (saved) currentModule--;

        StateHasChanged();
    }

    // ** Take the user to the project review page//
    async void OnReviewProjectClick()
    {
        bool saved = await saveModuleChanges();
        if (saved) currentStep++; //Move the step counter to the last step in project creation//
        
        StateHasChanged();
    }

    async void OnConfirm()
    {
        await addAllSelectedModules();
        // bool saved = await saveModuleChanges();
        currentStep++; //Move the step counter to the last step in project creation//

        StateHasChanged();
    }

    //subject to improved design
    // Returns true if saved sucessfully,
    // or false if there was an error in the user's input
    async Task<bool> saveModuleChanges()
    {
        // if _module is null, we are saving the app properties so we skip the error check
        if (_module == null ? true : !_module.hasErrors())
        {
            IsSaving = true;
            StateHasChanged();
            if (_module != null)
            {
                await _module.saveChanges();
            }
            await CrudService.UpdateAsync(app);
            IsSaving = false;
            return true;
        }
        else
        {
            await message.Error(Localizer["AddApplication.FixError"].ToString());
            return false;
        }
    }

    public async void submitApplication()
    {
        if (app.IsComplete)
        {
            return; // bounces multiple submit button presses
        }

        // Set next update date for all modules
        app.GetModules().ForEach(pair =>
        {
        // Set the date to 3 months from when it is created
        if (pair.Value != null)
            {
                pair.Value.NextUpdate = pair.Value.LastUpdate.AddMonths(3);
            }
        });

        app.IsComplete = true;

        if (isAppInProgress)
            await CrudService.UpdateAsync<Application>(app);
        else
        {
            if (app.ApplicationID == default)
            {
                await CrudService.InsertAsync<Application>(app);

            }
            else
            {
                await CrudService.UpdateAsync<Application>(app);

            }
        }

        await message.Success(Localizer["AddApplication.SuccessfullyCreated"].ToString(), 1);
        navigationManager.NavigateTo(Global.GetApplicationsTableURL());
    }

    private async void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        bool saved = await saveModuleChanges();
        if (saved) _visible = false;

        StateHasChanged();
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
        StateHasChanged();
    }


    private void addEmptyModuleToApp(ModuleTypeEnum type)
    {
        if (app.GetModules()[type] == null)
        {
            switch (type)
            {
                case ModuleTypeEnum.BASMOnboarding:
                    app.BASMOnboarding = new BASMOnboarding();
                    break;

                case ModuleTypeEnum.DatabaseEnvironment:
                    app.DatabaseEnvironment = new DatabaseEnvironment();
                    break;

                case ModuleTypeEnum.ServerEnvironment:
                    app.ServerEnvironment = new ServerEnvironment();
                    break;
                case ModuleTypeEnum.Report:
                    app.Report = new Report();
                    break;

            }
        }
    }
}
