@using System.ComponentModel.DataAnnotations;
@using TABS.Data;
@using Newtonsoft.Json;
@using System.Text.RegularExpressions;
@using TABS.Shared.Helpers;

@inject IStringLocalizer<App> Localizer

<Form @ref="form"
      Model="@model"
      ValidateOnChange="@true"
      ValidateMode="@FormValidateMode.Default"
      OnFinish="OnSubmit"
      WrapperColSpan="14"
      LabelColSpan="6"
      Layout="@FormLayout.Horizontal"
      OnValidationStateChanged="HandleValidationStateChange"
      >
    <FormItem Label="@Localizer[ModuleProperties["Name"].LocalizationKey]">
        <Input @bind-Value="@context.Name" AllowClear="true" DebounceMilliseconds="500" />
    </FormItem>
    <FormItem Label="@Localizer[ModuleProperties["URL"].LocalizationKey]">
        <Input @bind-Value="@context.URL" AllowClear="true" DebounceMilliseconds="500" />
    </FormItem>

    <FormItem Label="@Localizer[ModuleProperties["Type"].LocalizationKey]" WrapperColSpan="10">
@*        <EnumSelect TEnum="Server.ServerType"
                    @bind-Value="@context.Type"
                    Placeholder="Choose">
        </EnumSelect>*@
        <Select DataSource="@_serverTypes"
                @bind-Value="@context.Type"
                 Placeholder="@Localizer["Choose"]"
                 LabelName="@nameof(EnumType<Server.ServerType>.Name)"
                 ValueName="@nameof(EnumType<Server.ServerType>.Value)"
        />
    </FormItem>
    <FormItem Label="@Localizer[ModuleProperties["Version"].LocalizationKey]">
        <Input @bind-Value="@context.Version" DebounceMilliseconds="500"
               AllowClear="true" />
    </FormItem>
    <FormItem WrapperColSpan="14" WrapperColOffset="2">
        <Button Type="@ButtonType.Primary"
                HtmlType="submit"
                Disabled="@(!_isValid || !form.IsModified)"
                Loading="@_awaitingSave">
            @Localizer["Save"]
        </Button>
    </FormItem>
</Form>

@code

{
    private class Model
    {
        [Required]
        [StringLength(1000)]
        public string Name { get; set; }

        [StringLength(1500)]
        @*[RegularExpression(@"^(http|https):\/\/([^\s]*)$", ErrorMessage = "URL must start with http:// or https://, and not have any whitespace.")]*@
        public string URL { get; set; }

        [Required]
        public Server.ServerType Type { get; set; }

        [StringLength(200)]
        public string Version { get; set; }
    }

    [Parameter]
    public EventCallback<Server> OnSubmitSuccess { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public Server CurrentServer { get; set; }

    bool _awaitingSave = false;

    private Form<Model> form;
    private Model model = new Model();
    private bool submitted = false;

    private bool _isValid = true;

    private List<EnumType<Server.ServerType>> _serverTypes = new List<EnumType<Server.ServerType>>();


    private Dictionary<string, ModuleProperty> ModuleProperties = new Server().GetProperties();

    protected override void OnInitialized()
    {
        _serverTypes.Clear(); 
        foreach (Server.ServerType enumValue in Enum.GetValues(typeof(Server.ServerType)))
        {
            Type _enumType = typeof(Server.ServerType);
            string name = EnumTypeExtensions.GetLocalizedDisplayName(_enumType, enumValue);
            _serverTypes.Add(new EnumType<Server.ServerType>(name, enumValue));
        }

        model.Name = "";
        model.Version = "";
        model.URL = "";
        model.Type = Server.ServerType.Development;

        if (CurrentServer != null)
        {
            model.Name = CurrentServer.Name != null ? CurrentServer.Name : "";
            model.URL = CurrentServer.URL != null ? CurrentServer.URL : "";
            model.Version = CurrentServer.Version != null ? CurrentServer.Version : "";
            model.Type = CurrentServer.Type;

            if (model.Name == "") _isValid = false;
        }
        else
        {
            _isValid = false;
        }
        StateHasChanged();
    }

    private void HandleValidationStateChange(ValidationStateChangedEventArgs e)
    {
        // if (model.Name == "" || model.Name == null || !(model.URL == "" || model.URL == null || Regex.IsMatch(model.URL, @"^(http|https):\/\/([^\s]*)$"))) {
        if (model.Name == "" || model.Name == null) {
            _isValid = false;
        }
        else _isValid = true;
        StateHasChanged();
    }

    private async Task OnSubmit(EditContext editContext)
    {
        _awaitingSave = true;
        StateHasChanged();

        Server NewServer = new Server();
        NewServer.Name = model.Name;
        NewServer.URL = model.URL == null ? "" : model.URL;
        NewServer.Version = model.Version == null ? "" : model.Version;
        NewServer.Type = model.Type;

        _awaitingSave = false;
        submitted = true;

        await OnSubmitSuccess.InvokeAsync(NewServer);
    }

}

